1 - Podemos criar uma coleção de Strings usando a função listOf() ou listOf<String>() passando quantos elementos quisermos.
a. Verdadeiro
b. Falso

Resposta:
Verdadeiro! A função listOf permite que passemos N valores, a partir dela é gerada nossa List com todos os elementos passados.
Podemos deixar ou não explicito o tipo dos elementos no momento da criação da nossa lista.

2 - Com relação ao código abaixo, selecione todas as alternativas corretas:

fun test() {
    val mList = listOf<String>("Curso", "Desenvolvedor", "Kotlin")
    val mListTwo = mutableListOf<String>("Curso", "Desenvolvedor", "Kotlin", "Coleções")
}
a. Podemos chamar a função .add() a partir da variável mList e mListTwo
b. A variável mList é imutável, ou seja, não pode ser alterada
c. Apenas a variável mListTwo pode ser alterada
d. Podemos afirmar com certeza que a variável mList terá os mesmos valores enquanto ela existir

Resposta:
A alternativa 1 é incorreta pois está tentando adicionar mais elementos a uma lista que é imutável,
o que não é possível! Isto seria possível se tivéssemos criado nossa lista a partir da função mutableListOf,
exatamente como fizemos para nossa lista mListTwo.

3 - Qual a principal diferenteça entre List e Set?
a. List não permite valores duplicados, Set permite
b. Podemos adicionar inúmeros valores a uma List, já Set permite apenas um número limitado
c. Mesmo que adicionemos valores iguais em uma Set, apenas 1 deles será inserido, pois ela não permite valores duplicados, já uma List podemos adicionar sem problemas dois valores iguais
d. Set já realiza a ordenação dos valores por padrão mesmo quando inserimos em ordem aleatória, List não.

Resposta:
c - Um Set não permite valores duplicados.
Mesmo tentando passar valores iguais no momento da criação, ou adicionando posteriormente,
caso o valor já exista ele será desprezado, ficando sempre um único valor em nossa coleção.

4 - Sempre que utilizamos a função take(N), serão retornados os N primeiros elementos.
a. Verdadeiro
b. Falso

Resposta:
Correto, o método take sempre pega os elementos a partir do início da nossa coleção,
portanto, se passamos 1, será retornado o primeiro, 3 retornará os 3 primeiros, etc.

5 - Quando utilizamos a função filter, precisamos passar um predicado que nos retorne true ou false.
a. Verdadeiro
b. Falso

Resposta:
Verdadeiro! Quando fazemos um filtro, temos que passar para ele um predicado,
que é uma expressão que pode ser avaliada e sempre retornará um Boolean.
Podemos ter mais de uma comparação dentro do nosso filtro, por exemplo: mListTwo.filter { it.contains("Curso") || it.contains("Kotlin") }.any()

6 - Considerando a seguinte função:

fun filter() {
    val mList = setOf("Curso", "Desenvolvedor", "Kotlin", "Coleções", "Curso")
    mList.filter { it.startsWith("C") }.forEach { println(it) }
}

Qual será a saída?

Resposta:
a. Curso Coleções
b. Curso Coleções Curso
c. Coleções Curso
d. @List

Resposta:
a - Neste caso a saída será: Curso seguido de Coleções,
o valor "Curso" não será exibido mais de uma vez por conta do uso do Set, se fosse um List,
teríamos o valor Curso sendo exibido 2 vezes.

7 - Quais comandos podemos utilizar para verificar se determinada lista possui elementos?
a. mList.size > 0
b. mList.any()
c. mList.isNotEmpty()
d. mList.equals(0)

Resposta:
Apenas a alternativa 4 é incorreta!
Com o método equals() podemos verificar se um determinado valor é igual a outro, com ele,
não conseguimos saber se a nossa lista possui ou não elementos.
Todos os outros métodos funcionam e podem ser utilizados para esta verificação,
sendo a função any() a mais indicada para isto!