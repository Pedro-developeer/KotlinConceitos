1 - Kotlin permite que sejam definidos valores padrões para os parâmetros de nossas funções, e caso definido,
o valor padrão é utilizado quando não passamos nenhum valor para o parâmetro.
a. Verdadeiro
b. Falso

Resposta:
Podemos definir valores padrões para os parâmetros e caso não seja passado nenhum valor novo ao chamar a função, o valor padrão é utilizada pela função.
--------------------------------------

2 - Em kotlin, podemos criar funções que recebem inúmeros parâmetros, qual é a palavra chave que precisamos utilizar para que isto seja possível?
a. var
b. margs
c. vararg
d. args

Resposta:
c - Para criarmos uma função que recebe inúmeros valores, basta utilizarmos o vararg.
Ele nos permitirá passar N valores de um tipo específico declarado na função ou então vários tipos caso utilize um tipo genérico.
--------------------------------------

3 - "Dada a seguinte função:

fun salary(salary: Float, hourlyRate: Float = 200.0f, workedTime: Float) : Float {
    return salary / hourlyRate * workedTime
}

Selecione todas as alternativas que chamam a função com sucesso.
a. salary(10000.0f, 100.0f)
b. salary(7000.0f, 300f, 5f)
c. salary(workedTime = 100f)

Resposta:
Apenas a alternativa 2 está correta.
Na alternativa 2 passamos valores para salary e workedTime, deixando explicito que o valor passado é para workedTime.
As outras alternativas passam incorretamente os parâmetros, na primeira passamos apenas dois valores sem especificar o nome do parâmetro,
sendo assim, o compilador se perde e pensa que esquecemos de definir o valor de workedTime
Já na alternativa 3, passamos apenas workedTime, porém precisamos também passar algum valor para salary já que ele não possui nenhum valor padrão.
--------------------------------------

4 - Você está trabalhando em um projeto e alguém pergunta o que uma função chamada "other" aceita, você verifica a definição da função:
    fun <N> other(vararg vars: N)
O que você responde a quem perguntou?

a. A função other aceita apenas o tipo N, que é um tipo específico do projeto
b. A função other aceita todos os tipos que possuem N em seu nome: String, Int, Long e Boolean
c. Por utilizar a letra N significa que aceita muitos parâmetros e por conta disto, aceita qualquer tipo da linguagem Kotlin
d. A função other, aceita vários parâmetros e de vários tipos, ela foi definida com a letra N, mas poderia ter sido definida com qualquer outra.
A letra N não significa que ela recebe muitos parâmetros, o que define isto é a utilização do vararg

Resposta:
d. Independente do tipo de letra utilizada, o que define que nossa função aceita vários parâmetros é o uso do vararg,
utilizamos a letra N para definir que o tipo aceito é genérico, ou seja, aceita mais de um tipo.